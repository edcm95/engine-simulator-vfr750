import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

public node honda_vfr750 {
    alias output __out: engine;
    
    label bore(70.0 * units.mm)
    label stroke(48.6 * units.mm)
    label rod_length(101.5 * units.mm)
    label compression_height(17.3 * units.mm)

    engine engine(
        name: "Honda VFR750F (RC36-II)",
        starter_torque: 30 * units.lb_ft,
        starter_speed: 340 * units.rpm,
        redline: 11500 * units.rpm,
        fuel: fuel(
            max_burning_efficiency: 0.925,
            burning_efficiency_randomness: 0.85
        ),
        hf_gain: 0.00012,
        noise: 0.17,
        jitter: 0.15,
        simulation_frequency: 20000
    )

    wires wires()

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: 5 * units.kg,
        mass: 6 * units.kg,
        friction_torque: 2.1 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.2,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 135 * units.deg          
    )

    rod_journal rj0(angle: 0)            // pistons 1 and 2
    rod_journal rj1(angle: constants.pi) // pistons 3 and 4
    
    c0
        .add_rod_journal(rj0) // order does not matter
        .add_rod_journal(rj1)
        

    piston_parameters piston_params(
        mass: (190 + 14.3 + 39) * units.g,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0
    )

    connecting_rod_parameters cr_params(
        mass: 311.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )
    
    // Intake params
    intake_parameters intake_params(
        plenum_volume: 2.8 * units.L,
        plenum_cross_section_area: 10.179 * 4 * units.cm2,   // (36mm Keihin carbs) -> (pi * 18^2)/100 cm2
        intake_flow_rate: k_carb(160),
        runner_flow_rate: k_carb(200),
        runner_length: 210 * units.mm,
        molecular_afr: 15.0, // air fuel ratio
        idle_throttle_plate_position: 0.9952,
        idle_flow_rate: k_carb(0.01),
        throttle_gamma: 1.0
    )

    intake intake0(intake_params)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1100.0),
        primary_tube_length: 1.5 * units.m,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1
    )

    exhaust_system exhaust0(
        es_params,
        audio_volume: 1.0,
        //impulse_response: ir_lib.default_0
        //impulse_response: ir_lib.mild_exhaust_0
        impulse_response: ir_lib.minimal_muffling_01
    )

    cylinder_bank b0(bank_params, angle: 45 * units.deg)   // rear bank
    cylinder_bank b1(bank_params, angle: -45 * units.deg)  // front bank

    b0 
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.01)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake0,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.01)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake0,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        
    
    b1 
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.01)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake0,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.01)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake0,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        
        

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    vfr750_camshaft_builder camshaft()

    b0.set_cylinder_head (
        vfr750_engine_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
    
    b1.set_cylinder_head (
        vfr750_engine_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    engine.add_ignition_module(
        vfr750_distributor(
            wires: wires
        ))
}


label cycle(2 * 360 * units.deg)
private node vfr750_distributor {
    input wires;

    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: 12500 * units.rpm, limiter_duration: 0.055)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (7.0 / 8.0) * cycle);

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 10 * units.deg)
        .add_sample(2000 * units.rpm, 17.5 * units.deg)
        .add_sample(3000 * units.rpm, 26.5 * units.deg)
        .add_sample(4000 * units.rpm, 35 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 42 * units.deg)
        .add_sample(7000 * units.rpm, 42.5 * units.deg)
        .add_sample(8000 * units.rpm, 43 * units.deg)
        .add_sample(9000 * units.rpm, 43.5 * units.deg)
        .add_sample(10000 * units.rpm, 44 * units.deg)
        .add_sample(11000 * units.rpm, 44.5 * units.deg)
        .add_sample(12000 * units.rpm, 44.75 * units.deg)
        .add_sample(13000 * units.rpm, 45 * units.deg)
}

private node vfr750_camshaft_builder {
    input advance: 0 * units.deg; 
    input base_radius: 12.5 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    harmonic_cam_lobe intake_lobe_profile(
        duration_at_50_thou: 190 * units.deg,
        gamma: 1,
        lift: 8 * units.mm,
        steps: 100
    )
    
    harmonic_cam_lobe exhaust_lobe_profile(
        duration_at_50_thou: 190 * units.deg,
        gamma: 1,
        lift: 8 * units.mm,
        steps: 100
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)
    
    label rot90(90 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)
    
    // '94-'97 - Duration: 232 / 225
    // Intake = 15 / 37
    // Exhaust = 35 / 10

    label IVO(15.0 * units.deg) //BTDC
    label IVC(37.0 * units.deg) //ABDC
    label EVO(35.0 * units.deg) //BBDC
    label EVC(10.0 * units.deg) //ATDC

    label intake_duration(IVO + IVC + rot180) // 232
    label exhaust_duration(EVO + EVC + rot180) // 225

    label ILC(intake_duration / 2.0 - IVO)
    label ELC(exhaust_duration / 2.0 - EVC)


    //     180º        270º        180º         90º ...->
    // 1 -      -> 3 -      -> 2 -     -> 4
    // 0º         180º        450º       630º
    // 0 rot       2 rot       5 rot      7 rot


    // rear bank
    _exhaust_cam_0
        .add_lobe(rot360 - ELC + 2 * rot90)   // cyl 3
        .add_lobe(rot360 - ELC + 0 * rot90)   // cyl 1

    _intake_cam_0
        .add_lobe(rot360 + ILC + 2 * rot90)    // cyl 3
        .add_lobe(rot360 + ILC + 0 * rot90)    // cyl 1

    // front bank
    _exhaust_cam_1
        .add_lobe(rot360 - ELC + 7 * rot90)   // cyl 4
        .add_lobe(rot360 - ELC + 5 * rot90)   // cyl 2
        
    _intake_cam_1
        .add_lobe(rot360 + ILC + 7 * rot90)    // cyl 4  
        .add_lobe(rot360 + ILC + 5 * rot90)    // cyl 2 
}

private node vfr750_engine_head {
    input intake_camshaft;
    input exhaust_camshaft;
    
    alias output __out: head;

    // Valve sizes for RC45:
    // In:    29 mm              pi * 14.5^2  -> 660.5199 mm2 -> 6.605 cm2 
    // Ex:    24.5 mm     Areas: pi * 12.25^2  -> 471.4352 mm2 -> 4.714 cm2

    label inlet_valve_area(6.605)
    label exhaust_valve_area(4.71)

    label intake_runner_cross_section_area(inlet_valve_area * 1.1 * units.cm2) 
    label exhaust_runner_cross_section_area(exhaust_valve_area * 0.95 * units.cm2)

    label intake_runner_volume((intake_runner_cross_section_area * 5.5) * units.cc)   
    label exhaust_runner_volume((exhaust_runner_cross_section_area * 6) * units.cc) 
    
    label lift_scale(1)
    label flow_attenuation(1.2)

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 41 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 77 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 144 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 171 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 194 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 225 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 34 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 65 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 95 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 121 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 144 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 163 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 189 * flow_attenuation)

    label cyl_head_chamber_vol(17 * units.cc)
    cylinder_head head(
        chamber_volume: cyl_head_chamber_vol,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: false
    )
}



private node honda_vfr750_transmission {
    alias output __out: transmission;

    transmission transmission(
        max_clutch_torque: 60 * units.lb_ft
    )

    transmission.add_gear(2.8461)
    transmission.add_gear(2.0625)
    transmission.add_gear(1.6315)
    transmission.add_gear(1.3333)
    transmission.add_gear(1.1538)
    transmission.add_gear(1.0357)
}

private node honda_vfr750_vehicle {
    alias output __out:
        vehicle(
            mass: (226 + 65) * units.kg,
            drag_coefficient: 0.82, // not the most aerodynamic bike out there
            cross_sectional_area: (72 * 118.5 * 0.6) * units.cm2, // 72 cm wide, 118.5 cm tall
            diff_ratio: 9.4,
            tire_radius: (43.18 + 10.8) * units.cm,
            rolling_resistance: 29.03 * units.N
        );
}

public node main {
    set_engine(honda_vfr750())
    set_transmission(honda_vfr750_transmission())
    set_vehicle(honda_vfr750_vehicle())
}

main()
